<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Techpi.cn]]></title>
  <subtitle><![CDATA[技术派]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-09-29T07:42:29.494Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Techpi.cn]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Content Providers]]></title>
    <link href="http://yoursite.com/2015/09/27/content-provider-in-android-api-guide/"/>
    <id>http://yoursite.com/2015/09/27/content-provider-in-android-api-guide/</id>
    <published>2015-09-27T00:00:00.000Z</published>
    <updated>2015-09-29T07:42:29.494Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>学习了一段时间Android开发，其他的三大组件都稍微了解了一下，唯独这个Content Provider， 还一点也没了解过。 现在就通过翻译API Guide来了解下Content Provider吧。</p>
</blockquote>
<p>Content Providers 管理对<strong>结构化数据</strong>的访问。他们用于封装数据，并且提供了安全的定义数据的机制。 Content Provider 是从一个进程中访问另外一个进程数据的标准接口。</p>
<p>当你想要访问一个Content Provider中的数据时， 你需要在你的应用Context中使用ContentResolver来作为一个客户端和内容提供者通讯。 ContentResolver对象和提供者对象通讯， 这些对象是实现了ContentProvider的类的实例。 提供者对象从客户端接收请求， 执行请求的动作， 然后返回结果。</p>
<p>如果你不需要和其他应用共享你的数据，那么你不必开发自己的内容提供者。但是，你确实需要实现内容提供者来提供自定义的搜索建议。你同样需要自己实现内容提供者，如果你要复制粘贴复杂的数据和文件到其他的应用程序中。</p>
<p>Android本身提供了大量的内容提供者来管理各种数据，例如音频、视频、图像以及个人联系人信息。你可以在参考文档中的android.provider包中找到一些。这些内容提供者可以被任何安卓应用有限制的访问。</p>
<p>以下主题描述了内容提供者的更多细节：</p>
<ul>
<li><a href="#Basics">内容提供者基础</a><br> 如何访问ContentProvider中的数据表中的数据。</li>
<li><a href="#Basics">创建一个内容提供者</a><br> 如何创建自己的内容提供者</li>
<li><a href="#Calendar">日历提供者</a><br> 如何访问Android平台的日历提供者</li>
<li><a href="#Contacts">联系人提供者</a><br> 如何访问Android平台的联系人提供者</li>
</ul>
<h1 id="内容提供者基础"><a name="Basics">内容提供者基础</a></h1><p>内容提供者管理对集中存放数据的访问。内容提供者是一个安卓应用程序的一部分，应用经常会提供自己的UI来操作数据。但是，内容提供者主要用来为其他应用提供服务，这些应用可以使用提供者客户端对象来访问提供者的数据。提供者与客户端一起提供了一个一致的、标准的接口来进行跨进程通讯以及安全数据访问。</p>
<p>本文描述了以下内容的基础：</p>
<ul>
<li>内容提供者是如何工作的</li>
<li>从内容提供者获取数据要采用的API</li>
<li>使用内容提供者插入，更新以及删除数据需要使用的API</li>
<li>其他使用内容提供者的API</li>
</ul>
<h2 id="概述">概述</h2><p>一个内容提供者对外部的应用程序以一个或者多个数据表的形式呈现数据，这些数据表类似关系数据库中的数据表。一行代表了某种类型对象的一个实例，而一行中的一列代表这个实例的一些数据片段。</p>
<p>例如，Android平台内置的一个内容提供者，用户字典，存储了用户需要保存的非标准单词的拼写。表1给出了一个内容提供者数据格式的示例。<br>表1: 用户字典示例表</p>
<table>
<thead>
<tr>
<th>word</th>
<th>app id</th>
<th>frequency</th>
<th>locale</th>
<th>_ID</th>
</tr>
</thead>
<tbody>
<tr>
<td>mapreduce</td>
<td>user1</td>
<td>100</td>
<td>en_US</td>
<td>1</td>
</tr>
<tr>
<td>precompiler</td>
<td>user14</td>
<td>200</td>
<td>fr_FR</td>
<td>2</td>
</tr>
<tr>
<td>applet</td>
<td>user2</td>
<td>225</td>
<td>fr_CA</td>
<td>4</td>
</tr>
</tbody>
</table>
<p>表1中，每一行都代表了一个单词的实例，这些单词都可能无法在标准词典中找到。每一列都代表了这个单词的某些信息，例如第一次出现的时区信息（有点无法理解这个字段的意义，whatever，不影响理解ContentProvider）。这些列头是数据列的名字。当你说一行的locale时，你指的是locale这一列。对于这个提供者，_ID列担当了主键的角色被提供者自动维护。</p>
<blockquote>
<p>注意：一个内容提供者并不必须要有一个主键，而且即使有主键也不必须使用_ID来作为主键的列名。但是，如果你想要绑定一个提供者的数据到一个ListView，那么其中的一个列名必须是_ID。这个要求在”Displaying query results”章节中进行了更详细的解释。</p>
</blockquote>
<h3 id="访问内容提供者">访问内容提供者</h3><p>一个应用使用ContentResolver客户端对象来从内容提供者访问数据。这个对象拥有一些方法，这些方法会调用内容提供者的完全一样名字的方法，这些内容提供者是ContentProvider子类的实例。ContentResolver方法提供了基本的”CRUD”等持久化方法（创建，获取，更新，删除）。</p>
<p>ContentResolver对象运行于客户端应用进程中，而拥有ContentProvider对象的进程负责自动处理跨进程通讯。 Content Provider同样扮演了数据仓库和数据外在表现形式（数据表）之间的抽象层的角色。</p>
<blockquote>
<p>注意：为了访问一个数据提供者，你的应用经常需要在Manifest文件中申请一些特定的权限。这些将在<strong>内容提供者权限</strong>章节进行详细的描述。</p>
</blockquote>
<p>例如，为了从用户字典提供者获取单词和地点的列表，需要调用ContentResolver.query()方法。query方法然后调用ContentProvider.query()方法，这个方法是用户字典提供者实现的。以下代码演示了这个调用:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询用户词典并返回结果</span></span><br><span class="line">mCursor = getContentResolver().query(</span><br><span class="line">    UserDictionary.Words.CONTENT_URI,   <span class="comment">// 单词表的内容 URI </span></span><br><span class="line">    mProjection,                        <span class="comment">// 需要返回的列</span></span><br><span class="line">    mSelectionClause                    <span class="comment">// 查询条件</span></span><br><span class="line">    mSelectionArgs,                     <span class="comment">// 查询条件参数</span></span><br><span class="line">    mSortOrder);                        <span class="comment">// 排序方式</span></span><br></pre></td></tr></table></figure></p>
<p>表2列出了<code>query(Uri,projection,selection,selectionArgs,sortOrder)</code>方法参数和SQL SELECT语句的对比</p>
<p>表2 Query方法和SQL查询的对比</p>
<table>
<thead>
<tr>
<th>query()参数</th>
<th>SELECT关键字/参数</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Uri</td>
<td>FROM table_name</td>
<td>Uri对应于内容提供者的table_name数据表</td>
</tr>
<tr>
<td>projection</td>
<td>col,col,col,…</td>
<td>projection是需要返回的列名的数组</td>
</tr>
<tr>
<td>selection</td>
<td>WHERE col=value</td>
<td>selection指定了查询条件</td>
</tr>
<tr>
<td>selectionArgs</td>
<td>（没有完全相同的对应，SelectionArgs替代查询条件中的?占位符）</td>
<td></td>
</tr>
<tr>
<td>sortOrder</td>
<td>ORDER BY col,col</td>
<td>sortOrder制定了返回的Cursor中每一行的排列数序</td>
</tr>
</tbody>
</table>
<h3 id="内容Uris">内容Uris</h3><p>一个内容Uri是一个URI，它唯一标识了内容提供者中的数据。内容URI包含整个内容提供者的符号名称(authority)以及指向数据表的一个名称（路径）。当你调用客户端方法来访问数据提供者的一个表的时候，该表的内容Uri是其中的一个参数。</p>
<p>例如在前面的查询代码中，常量CONSTANT_URI包含了用户字典的words数据表的内容URI。ContentResolver对象分析出URI的authority，然后使用它来“解析”出内容提供者（通过与系统表中已知的内容提供者进行比较）。然后ContentResolver将查询分发给正确的提供者。</p>
<p>ContentProvider使用内容URI的路径部分来选择访问哪个数据表。一个内容提供者应该为公开的每个表都提供路径。<br>在前面的代码中，words表的一个完整的URI形式应该是：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">content:</span><span class="comment">//user_dictionary/words</span></span><br></pre></td></tr></table></figure></p>
<p>其中user_dictionary字符串是内容提供者的authority部分，words是数据表的路径部分。字符串content://(schema部分)总是存在，它标识着这是一个内容URI。<br>很多内容提供者允许你通过在末尾添加一个ID来查询数据表中一个单独的行。例如，为了从用户字典表中获取_ID为4的一行，你可以这样使用内容URI。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uri singleUri = ContentUris.withAppendedId(UserDictionary.Words.CONTENT_URI,<span class="number">4</span>);</span><br></pre></td></tr></table></figure></p>
<p>当你获取到一些数据行之后，想要更新或者删除其中一条的时候，你会经常这样使用。</p>
<blockquote>
<p>注意：<code>Uri</code>和<code>UriBuilder</code>类包含了一些方便的方法用于从字符串对象构建”well-formed”（正确格式）的URI对象。<code>ContentUris</code>包含了一些方便的方法用于为一个URI添加id值。前面的代码片段使用了<code>withAppendedId()</code>来在用户字典内容URI中追加id。</p>
</blockquote>
<h2 id="从内容提供者读取数据">从内容提供者读取数据</h2><p>这一节描述如何从一个内容提供者读取数据，使用用户字典提供者作为一个示例。</p>
<blockquote>
<p>为了代码的清楚简单起见，本节的代码片段直接在UI线程中调用了ContentResolver.query()方法。但是，在实际的代码中，你应该在一个单独的线程中异步的执行查询。为了做到这一点，一种方法是使用CursorLoader类，这个类在”Loaders”向导中进行了详细的描述。同样的，这些代码只是一些片段，并不是一个完整的应用。</p>
</blockquote>
<p>为了从内容提供者获取数据，采用以下基本步骤：</p>
<ol>
<li>从提供者请求权限</li>
<li>编写代码向提供者发送查询</li>
</ol>
<h3 id="请求访问权限">请求访问权限</h3><p>为了从提供者获取数据，你的应用需要该提供者的“读权限”。你不能在运行时申请这个权限，而是在manifest中通过<use-permission>元素来指明提供者定义的权限名称。当你在manifest使用这个元素时，你实际上是为你的应用程序来请求这个权限。当用户安装你的应用时，他们就允许了这个权限。</use-permission></p>
<p>为了获取提供者需要的读权限的确切名称，以及其他权限的名称，查阅提供者的文档。<br>权限在访问提供者中的起的作用在内容提供者权限章节有更加详细的描述。</p>
<p>用户字典提供者在manifest中定义了android.permission.READ_USER_DICTIONARY，所以需要访问用户词典提供者的应用程序必须申请这个权限。</p>
<h3 id="构建查询">构建查询</h3><p>从提供者获取数据的第二步就是构建查询。下面的第一个代码片段定义了一些变量用以访问用户字典提供者。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//需要返回那些列</span></span><br><span class="line">String[] mProjection =</span><br><span class="line">&#123;</span><br><span class="line">    UserDictionary.Words._ID,    <span class="comment">// Contract class constant for the _ID column name</span></span><br><span class="line">    UserDictionary.Words.WORD,   <span class="comment">// Contract class constant for the word column name</span></span><br><span class="line">    UserDictionary.Words.LOCALE  <span class="comment">// Contract class constant for the locale column name</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询条件</span></span><br><span class="line">String mSelectionClause = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询条件的参数</span></span><br><span class="line">String[] mSelectionArgs = &#123;<span class="string">""</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>第二个代码段展示了如何使用ContentResolver.query()，使用用户字典提供者作为例子。一个提供者客户端查询与SQL查询类似，包含了需要返回的列的集合，查询条件的集合以及排序方式。</p>
<p>查询要返回的列的集合被称作“投影”,projection（这个例子中的变量mProjection）。</p>
<p>指明需要返回那些列的表达式分成了查询条件语句和查询参数两部分。查询条件语句是逻辑表达式和布尔表达式、列名以及值的组合（这个例子中的变量mSelectionClause）。如果你需要指明可以替换的参数?来代替具体的值，查询方法会从查询参数数组中获取这些值（这个例子中的变量mSelectionArgs）。</p>
<p>在下面这个代码片段中，如果用户不输入一个词，查询语句将会被设置成null，查询就会从提供者返回所有的单词。如果用户输入了一个词，查询语句会被设置成<code>UserDictionary.Words.WORD+&quot; = ?&quot;</code>并且查询参数数组的第一个元素将被设置成用户输入的内容。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义了一个元素的字符串数组用来盛放查询参数</span></span><br><span class="line">String[] mSelectionArgs = &#123;<span class="string">""</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从UI中获取一个输入</span></span><br><span class="line">mSearchString = mSearchWord.getText().toString();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记得这里要插入输入的有效性验证</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果输入为空，返回所有单词</span></span><br><span class="line"><span class="keyword">if</span> (TextUtils.isEmpty(mSearchString)) &#123;</span><br><span class="line">    <span class="comment">// 将查询条件设置为null将会返回所有数据。</span></span><br><span class="line">    mSelectionClause = <span class="keyword">null</span>;</span><br><span class="line">    mSelectionArgs[<span class="number">0</span>] = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 使用用户输入构建一个查询条件</span></span><br><span class="line">    mSelectionClause = UserDictionary.Words.WORD + <span class="string">" = ?"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置查询参数第一个元素为用户输入内容</span></span><br><span class="line">    mSelectionArgs[<span class="number">0</span>] = mSearchString;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询，并且返回一个Cursor对象</span></span><br><span class="line">mCursor = getContentResolver().query(</span><br><span class="line">    UserDictionary.Words.CONTENT_URI,  <span class="comment">// The content URI of the words table</span></span><br><span class="line">    mProjection,                       <span class="comment">// The columns to return for each row</span></span><br><span class="line">    mSelectionClause                   <span class="comment">// Either null, or the word the user entered</span></span><br><span class="line">    mSelectionArgs,                    <span class="comment">// Either empty, or the string the user entered</span></span><br><span class="line">    mSortOrder);                       <span class="comment">// The sort order for the returned rows</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Some providers return null if an error occurs, others throw an exception</span></span><br><span class="line"><span class="comment">// 一些提供者可能会在出错的时候返回null，但是另外的一些可能直接抛出异常</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == mCursor) &#123;</span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     * Insert code here to handle the error. Be sure not to use the cursor! You may want to</span><br><span class="line">     * call android.util.Log.e() to log this error.</span><br><span class="line">     *</span><br><span class="line">     */</span></span><br><span class="line"><span class="comment">// 如果Cursor对象是空对象，那么说明没有任何匹配的结果</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (mCursor.getCount() &lt; <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     * Insert code here to notify the user that the search was unsuccessful. This isn't necessarily</span><br><span class="line">     * an error. You may want to offer the user the option to insert a new row, or re-type the</span><br><span class="line">     * search term.</span><br><span class="line">     */</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Insert code here to do something with the results</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个查询类似于下面的SQL语句</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT _ID, word, locale FROM words WHERE word = &lt;userinput&gt; ORDER BY word ASC;</span><br></pre></td></tr></table></figure>
<p>在这个SQL语句中，直接使用了列名而不是contract类常量。</p>
<h4 id="非法输入处理">非法输入处理</h4><p>如果内容提供者底层采用的数据库来管理数据，那么在SQL语句中直接使用外部不可信的数据将会导致SQL注入。<br>考虑下面的查询语句：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Constructs a selection clause by concatenating the user's input to the column name</span></span><br><span class="line">String mSelectionClause =  <span class="string">"var = "</span> + mUserInput;</span><br></pre></td></tr></table></figure></p>
<p>如果你这么做，那么你就在允许用户将非法的SQL注入你的查询。例如，如果用户输入”nothing;Drop TABLE <em>;”作为mUserInput的内容，这将会导致查询语句变成`var = nothing; DROP TABLE </em>;`。既然查询语句是作为sql语句被处理的，这将会导致提供者删除SQLite中的所有数据表（除非提供者会检测所有的SQL注入检测）</p>
<p>为了避免这个问题，可以在使用查询语句中使用？来作为可替代的字符并且使用查询参数列表。当你这样做的时候，用户输入会直接绑定到查询条件上而不是解释为SQL的一部分。因为用户输入不是按照SQL语句处理的，所以用户输入不能注射非法的SQL。所以不要使用字符串拼接来处理用户输入，而要使用如下的查询语句：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Constructs a selection clause with a replaceable parameter</span></span><br><span class="line">String mSelectionClause =  <span class="string">"var = ?"</span>;</span><br></pre></td></tr></table></figure>
<p>然后如下设置查询参数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Defines an array to contain the selection arguments</span></span><br><span class="line">String[] selectionArgs = &#123;<span class="string">""</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>采用如下的方式来将用户输入放置到查询参数中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sets the selection argument to the user's input</span></span><br><span class="line">selectionArgs[<span class="number">0</span>] = mUserInput;</span><br></pre></td></tr></table></figure>
<p>一个查询语句使用?作为可替代的参数以及查询参数的方式是值得推荐的方式，即使提供者并不是采用SQL数据库来实现的。</p>
<h3 id="显示查询结果">显示查询结果</h3><p>ContentResolver.query()客户端方法总是返回一个Cursor对象，这个对象包含了符合查询条件的数据行以及通过查询的projection参数指定的数据列。一个Cursor对象提供了它所包含的行和列的随机读访问。使用Cursor的方法，你可以在结果中迭代所有的行，确定每列的数据类型然后从每一列中取出数据并且检查结果的其他一些属性。一些Cursor实现了当数据源发生变化时内部数据也相应变化或者当Cursor发生变化时触发观察者对象的方法，或者二者都实现了。</p>
<blockquote>
<p>注意： 一个提供者或许会根据创建查询对象的性质来限制对列的访问。例如，联系人提供者会对一些同步适配器限制一些列，所以它不会把他们返回给一个activity或者一个service。（不太明白）</p>
</blockquote>
<p>如果没有匹配的结果，提供者返回一个Cursor对象，在这个对象上调用Cursor.getCount()将返回0（一个空的cursor对象）.</p>
<p>如果发生了内部错误，返回的结果取决于特定的提供者。它可以选择返回null，或者它可以抛出一个异常。</p>
<p>既然一个Cursor是数据行的列表，那么很自然的，展示它的数据的好办法就是采用SimpleCursorAdapter将它和一个ListView绑定在一起。</p>
<p>以下的代码是前面代码段的继续。它创建了一个SimpleCursorAdapter对象，这个对象包含了从查询得到的Cursor对象，并将这个对象设置成了ListView的adapter：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Defines a list of columns to retrieve from the Cursor and load into an output row</span></span><br><span class="line">String[] mWordListColumns =</span><br><span class="line">&#123;</span><br><span class="line">    UserDictionary.Words.WORD,   <span class="comment">// Contract class constant containing the word column name</span></span><br><span class="line">    UserDictionary.Words.LOCALE  <span class="comment">// Contract class constant containing the locale column name</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Defines a list of View IDs that will receive the Cursor columns for each row</span></span><br><span class="line"><span class="keyword">int</span>[] mWordListItems = &#123; R.id.dictWord, R.id.locale&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Creates a new SimpleCursorAdapter</span></span><br><span class="line">mCursorAdapter = <span class="keyword">new</span> SimpleCursorAdapter(</span><br><span class="line">    getApplicationContext(),               <span class="comment">// The application's Context object</span></span><br><span class="line">    R.layout.wordlistrow,                  <span class="comment">// A layout in XML for one row in the ListView</span></span><br><span class="line">    mCursor,                               <span class="comment">// The result from the query</span></span><br><span class="line">    mWordListColumns,                      <span class="comment">// A string array of column names in the cursor</span></span><br><span class="line">    mWordListItems,                        <span class="comment">// An integer array of view IDs in the row layout</span></span><br><span class="line">    <span class="number">0</span>);                                    <span class="comment">// Flags (usually none are needed)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Sets the adapter for the ListView</span></span><br><span class="line">mWordList.setAdapter(mCursorAdapter);</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：为了在ListView中使用Cursor，这个cursor对象一定要包含一个名字为_ID的行，因此，前面显示的查询返回了words数据表的_ID列，即使ListView并不显示这一列。这一限制也解释了为什么大部分提供者的每个表都有_ID列。</p>
</blockquote>
<h3 id="从查询结果中获取数据">从查询结果中获取数据</h3><p>你有时候不仅仅是展示这些查询结果，你还需要在其他人物中使用这些数据。例如，你可以从用户词典中获取某些单词并且使用它们在其他的provider中进行查询。为了达到这个目的，你需要迭代Cursor中的数据行。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Determine the column index of the column named "word"</span></span><br><span class="line"><span class="keyword">int</span> index = mCursor.getColumnIndex(UserDictionary.Words.WORD);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * Only executes if the cursor is valid. The User Dictionary Provider returns null if</span><br><span class="line"> * an internal error occurs. Other providers may throw an Exception instead of returning null.</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mCursor != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     * Moves to the next row in the cursor. Before the first movement in the cursor, the</span><br><span class="line">     * "row pointer" is -1, and if you try to retrieve data at that position you will get an</span><br><span class="line">     * exception.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">while</span> (mCursor.moveToNext()) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Gets the value from the column.</span></span><br><span class="line">        newWord = mCursor.getString(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Insert code here to process the retrieved word.</span></span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">// end of while loop</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Insert code here to report an error if the cursor is null or the provider threw an exception.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Cursor的实现中包含了多个”getXXX”方法来从cursor对象中获取不同数据类型的数据。例如，上面的代码使用了getString()。他们同样提供了一个getType()方来获取数据列到底是什么数据类型。</p>
<h2 id="内容提供者权限">内容提供者权限</h2><p>一个内容提供者应用可以指定一些权限，其他的应用为了获取提供者的数据，必须申请这些权限。这些权限确保用户了解一个应用试图访问什么数据。根据提供者的要求，其他应用为了访问提供者需要申请各种权限。终端用户可以在他们安装应用时看到这些请求的权限。</p>
<p>如果一个提供者应用没有生命任何权限，那么其他的应用就没有权限访问提供者的数据。但是，提供者应用内的组件总是具有完全的读写权限，不管是不是指定了权限。</p>
<p>就像前面所说的，用户字典提供者需要<code>android.permission.READ_USER_DICTIONARY</code>权限来获取数据。提供者声明了<code>android.permission.WRITE_USER_DICTIONARY</code>权限用来插入、更新或者删除数据。</p>
<p>为了获得访问一个提供者的权限，一个应用需要在manifest文件中使用<uses-permission>来申请。当Android Package Manager 安装这个应用的时候，用户需要同意所有的权限才能进行安装。如果用户同意了所有的权限，Package Manager继续进行安装。如果用户不同意这些权限，Package Manager会放弃安装。</uses-permission></p>
<p>下面这个 <uses-permission>元素申请了用户字典提供者需要的读权限。</uses-permission></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">uses-permission</span> <span class="attribute">android:name</span>=<span class="value">"android.permission.READ_USER_DICTIONARY"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>权限对访问提供者的影响在“安全和权限”向导中解释的更为详细。</p>
<h2 id="插入、更新以及删除数据">插入、更新以及删除数据</h2><p>与从提供者获取数据相同，为了修改数据你也需要提供者和消息提供者的ContentProvider对象进行同样的交互。对ContentResolver方法的调用会被传递到ContentProvider的对应方法。内容提供者和提供者的客户端会自动处理安全问题以及跨进程通讯。</p>
<h3 id="插入数据">插入数据</h3><p>为了向一个提供者插入输入，你需要调用ContentResolver.insert()方法。这个方法在提供者中插入一个新行并且返回该行的内容URI。以下代码片段展示了如何向用户字典提供者中插入一个新的单词。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Defines a new Uri object that receives the result of the insertion</span></span><br><span class="line">Uri mNewUri;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Defines an object to contain the new values to insert</span></span><br><span class="line">ContentValues mNewValues = <span class="keyword">new</span> ContentValues();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * Sets the values of each column and inserts the word. The arguments to the "put"</span><br><span class="line"> * method are "column name" and "value"</span><br><span class="line"> */</span></span><br><span class="line">mNewValues.put(UserDictionary.Words.APP_ID, <span class="string">"example.user"</span>);</span><br><span class="line">mNewValues.put(UserDictionary.Words.LOCALE, <span class="string">"en_US"</span>);</span><br><span class="line">mNewValues.put(UserDictionary.Words.WORD, <span class="string">"insert"</span>);</span><br><span class="line">mNewValues.put(UserDictionary.Words.FREQUENCY, <span class="string">"100"</span>);</span><br><span class="line"></span><br><span class="line">mNewUri = getContentResolver().insert(</span><br><span class="line">    UserDictionary.Word.CONTENT_URI,   <span class="comment">// the user dictionary content URI</span></span><br><span class="line">    mNewValues                          <span class="comment">// the values to insert</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>新的数据行所需要的数据都被封装到一个ContentValues对象中，形式上看起来像一个只有一行的cursor对象，对象的各列不必具有相同的数据类型，如果你不想为某个字段指定值，那你可以将这个列设置成null，使用ContentValues.putNull()方法。</p>
<p>代码中并没有添加_ID字段，因为这个字段是自动维护的。提供者为增加的每一行指定一个唯一的值。提供者通常使用这个值作为数据表的主键。</p>
<p>内容URI在newUri中返回，它是新增加的一行的标识，以以下的格式：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">content:</span><span class="comment">//user_dictionary/words/&lt;id_value&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><id_value>就是新数据行_ID字段的值。大多数提供者能够自动检测这种形式的URI并且在特定的行上执行请求的操作。</id_value></p>
<p>为了从返回的Uri中获取_ID值，调用ContentUris.parseId().</p>
<h3 id="更新数据">更新数据</h3><p>为了更新一行，使用ContentValues对象，就像插入数据一样填充上需要更新的值，同时需要设置查询条件，就像你进行查询时一样。使用的客户端方法是ContentResolver.update()。你仅仅需要添加数据到你需要更新的字段，如果你要清楚该字段的内容，将值设置为null。</p>
<p>以下代码段更改所有locale为语言”en”的行的locale值为null。返回值是被更新的数据的行数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Defines an object to contain the updated values</span></span><br><span class="line">ContentValues mUpdateValues = <span class="keyword">new</span> ContentValues();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Defines selection criteria for the rows you want to update</span></span><br><span class="line">String mSelectionClause = UserDictionary.Words.LOCALE +  <span class="string">"LIKE ?"</span>;</span><br><span class="line">String[] mSelectionArgs = &#123;<span class="string">"en_%"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Defines a variable to contain the number of updated rows</span></span><br><span class="line"><span class="keyword">int</span> mRowsUpdated = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * Sets the updated value and updates the selected words.</span><br><span class="line"> */</span></span><br><span class="line">mUpdateValues.putNull(UserDictionary.Words.LOCALE);</span><br><span class="line"></span><br><span class="line">mRowsUpdated = getContentResolver().update(</span><br><span class="line">    UserDictionary.Words.CONTENT_URI,   <span class="comment">// the user dictionary content URI</span></span><br><span class="line">    mUpdateValues                       <span class="comment">// the columns to update</span></span><br><span class="line">    mSelectionClause                    <span class="comment">// the column to select on</span></span><br><span class="line">    mSelectionArgs                      <span class="comment">// the value to compare to</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<p>同样的，在调用ContentResolver.update()时，你同样需要检查用户输入的有效性。阅读“非法输入处理”章节以了解更多内容。</p>
<h3 id="删除数据">删除数据</h3><p>删除数据行和获取数据相似：你只需要指定你想要删除的行的查询条件，客户端方法返回删除的行的数目。下面的代码段删除appid字段匹配”user”的行。方法返回被删除的行的数目。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Defines selection criteria for the rows you want to delete</span></span><br><span class="line">String mSelectionClause = UserDictionary.Words.APP_ID + <span class="string">" LIKE ?"</span>;</span><br><span class="line">String[] mSelectionArgs = &#123;<span class="string">"user"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Defines a variable to contain the number of rows deleted</span></span><br><span class="line"><span class="keyword">int</span> mRowsDeleted = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Deletes the words that match the selection criteria</span></span><br><span class="line">mRowsDeleted = getContentResolver().delete(</span><br><span class="line">    UserDictionary.Words.CONTENT_URI,   <span class="comment">// the user dictionary content URI</span></span><br><span class="line">    mSelectionClause                    <span class="comment">// the column to select on</span></span><br><span class="line">    mSelectionArgs                      <span class="comment">// the value to compare to</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>在删除数据时，你同样需要检查用户输入的合法性。阅读“非法输入处理”章节以了解更多内容。</p>
<h2 id="内容提供者数据类型">内容提供者数据类型</h2><p>内容提供者可以提供多种不同的数据类型。用户字典提供者仅仅提供文本，但是其他提供者可以提供以下类型：</p>
<ul>
<li>整型</li>
<li>长整型</li>
<li>浮点类型</li>
<li>长浮点型(double,双精度浮点型)</li>
</ul>
<p>内容提供者还可以提供BLOB类型的数据以64KB字节数组的方式来实现。你可以通过查看Cursor类的”get”方法来查看支持那些数据类型。</p>
<p>提供者的每个字段的数据类型通常会在它的文档中列出。用户字典提供者的数据类型在它的contract类UserDictionary.Words的参考文档中列出。（Contract类在Contract Class章节中描述）。你可以通过调用Cursor.getType()方法来获取类型。</p>
<p>提供者同样维护它们定义的每个内容URI的MIME数据类型。你可以使用MIME类型信息来找到你的应用是否能够处理提供者提供的数据，或者根据MIME类型选择一种处理的类型？当你使用包含复杂数据结构或者文件的内容提供者时通常你需要MIME类型。例如，联系人提供者中的ContactsContract.Data数据表使用MIME类型来标注每行中存储的数据的类型。调用ContentResolver.getType()方法来获取内容URI的MIME类型。</p>
<p>MIME类型参考一节中描述了标准MIME类型以及自定义MIME类型的语法。</p>
<h2 id="访问内容提供者的其他方式">访问内容提供者的其他方式</h2><p>应用开发中还有三种访问内容提供者的其他方式</p>
<ul>
<li>批量访问： 你可以使用ContentProviderOperation类创建批量访问， 然后调用ContentResolver.applyBatch()来执行他们。</li>
<li>异步查询： 你应该在独立的线程中来进行查询。 一种方式是使用CursorLoader对象。 “Loaders”中的例子说明了如何使用。</li>
<li>通过Intent访问数据： 尽管你不能直接发送意图给一个内容提供者，但是你可以发送意图给提供者的应用，一般他们都提供了修改提供者数据的最佳方式。</li>
</ul>
<p>批量访问和通过意图进行修改在以下的章节中进行描述。</p>
<h3 id="批量访问">批量访问</h3><p>批量访问一个提供者在以下几种情况下非常有用：插入大量行、在同一个方法调用中插入多个表的数据，或者在一个事务中跨过进程边界进行大量操作（原子操作）</p>
<p>为了在“批量”模式下访问一个提供者，需要创建ContentProviderOperation对象数组，然后使用ContentResolver.applyBatch()方法。传递内容提供者的authrity给这个方法，而不是具体的内容URI。这可以让每个ContentProviderOperation操作不同的数据表。ContentResolver.applyBatch()方法返回结果的数组。</p>
<p>ContactsContract.RawContacts类的描述演示了如何使用批量插入，它还包含了一段示例性代码。Contact Manager示例应用包含了一个批量访问的例子，在ContactAdder.java文件中。</p>
<h3 id="通过Intent访问数据">通过Intent访问数据</h3><p>可以通过Intent间接访问一个内容提供者。你可以允许用户访问一个Provider的数据，即使你的应用没有访问权限。可以通过Intent从具有权限的应用获得返回结果或者激活一个有权限的应用并让用户使用它来访问。</p>
<h4 id="获取临时的权限">获取临时的权限</h4><p>即使你没有合适的访问权限，你也可以从一个内容提供者获取数据，通过向一个有权限的应用发送Intent的方式然后收到包含URI权限的Intent结果。这种权限是相对于指定的内容URI的，会持续到接收该权限的Activity结束为止。具有永久权限的应用程序可以在Intent result中授予临时权限，通过设置在result Intent中设置flag。</p>
<ul>
<li>读权限： <code>FLAG_GRANT_READ_URI_PERMISSION</code></li>
<li>写权限： <code>FLAG_GRANT_WRITE_URI_PERMISSION</code></li>
</ul>
<blockquote>
<p>注意： 这些flag并不能授予应用一般的读写URI中authority对应提供者的权限。这些权限仅仅针对URI本身。</p>
</blockquote>
<p>一个提供者在manifest定义内容URI需要的URI权限，使用<provider>的android:grantUriPermission属性，也可以使用<provider>元素的<grant-uri-permission>子元素。URI权限机制在安全和权限相当详细解释，URI权限章节。</grant-uri-permission></provider></provider></p>
<p>例如，你可以从联系人提供者获取联系人数据，即使你并没有READ_CONTACTS权限。你也许想在应用中发送电子贺卡给某个联系人。这样你不必请求READ_CONTACTS权限，这个权限会给你读取所有用户的权限，你可以让用户自己控制你的应用应该使用哪个联系人。为了做到这一点，你需要以下的步骤</p>
<ol>
<li>你的应用需要发送一个意图，这个意图使用ACTION_PICK以及联系人MIME类型 CONTENT_ITEM_TYPE,然后使用startActivityForResult()方法。</li>
<li>因为这个意图match People应用的”selection” Activity的意图过滤器，所以会将这个Activity带到前台。</li>
<li>在selection Activity中，用户选择了一个联系人。Selection Activity调用setResult(resultCode,intent)来创建一个intent来返回给你的应用。intent包含了你选择的联系人的内容URI以及“额外的”falg FLAG_GRANT_READ_URI_PERMISSION。这些flag给你的app授予了URI权限以便你的应用可以读取该内容URI指向的联系人的数据。然后selection Activity调用了finish()把控制权交还给了你的应用。</li>
<li>你的应用返回到了前台，系统调用了activity的onActivityResult()方法。这个方法受到了selection activity创建的结果Intent。</li>
<li>通过结果Intent的内容URI，你可以从联系人提供者读取联系人的数据，即使你没有请求读取联系人权限。你可以获取联系人的生日信息或者他的email地址并且发送电子贺卡给他。</li>
</ol>
<h4 id="使用一个helper_app显示数据">使用一个helper app显示数据</h4><p>如果你的应用没有访问权限，你也可以使用一个Intent来显示其他应用的数据。例如，日历应用程序可以接受Action_View意图，这可以用来显示特定的日期或者事件。这使得你可以在不创建自己UI的情况下显示日历信息。要了解更多信息，参见日历提供者向导。</p>
<p>你发送意图的应用并不一定是内容提供者所在的应用。例如，你可以从联系人提供者获取一个联系人，然后发送Action_View意图并且包含内容URI给图像查看器来查看联系人的图像。</p>
<h4 id="使用其他的应用">使用其他的应用</h4><p>让用户修改你没有权限的数据的一个简单方法是激活其他有权限的应用，并让应用使用这个应用来做这件事。<br>例如，日历应用接收一个ACTION_INSERT意图，这可以让你激活应用的“插入”UI。你可以在应用中传递”extras”数据，这些数据被应用程序用来填充UI。因此……</p>
<h2 id="Contract类">Contract类</h2><p>一个contract类定义了一些常量。这些常量用来帮助应用处理内容URI，字段名称，意图Action以及内容提供者的其他一些特性。Contract类并不会自动包含在提供者中。提供者开发人员应该定义这些类并且将他们提供给其他开发者。很多Android平台自身提供的Provider都有对应的contract类，这些类包含在android.provider包中。</p>
<p>例如，用户字典提供者有一个contract类UserDictionary包含了内容URI以及字段名称常量。words表的内容URI在UserDictionary.Words.CONTENT_URI常量中定义。UserDictionary.Words类同样定义了一些字段名称常量，本向导的一些实例代码中使用了这些常量。例如，一个查询project可以被这样定义：</p>
<p>‘’’java<br>String[] mProjection =<br>{<br>    UserDictionary.Words._ID,<br>    UserDictionary.Words.WORD,<br>    UserDictionary.Words.LOCALE<br>};<br>‘’’</p>
<p>另外一个contract类是联系人提供者的ContractsContract。这个类的参考文档包含一些例子。它的一个子类，ContactsContact.Intents.Insert，是一个contract类，它包含了Intent常量和intent数据。</p>
<h2 id="MIME类型参考">MIME类型参考</h2><p>内容提供者可以返回标准的MIME媒体类型或者自定义MIME类型字符串，或者二者。<br>MIME类型的格式：</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="typedef"><span class="keyword">type</span>/subtype</span></span><br></pre></td></tr></table></figure>
<p>例如，众所周知的MIME类型 text/html 包含了 text 类型以及 html 子类型。如果提供者对于一个URI返回这种类型，那意味着使用这个uri进行查询会返回包含html 标签的文本。</p>
<p>自定义MIME类型字符串，也叫做”vendor-specific” MIME类型，它的类型和子类型更加复杂，对于多行数据， 类型通常是如下格式：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vnd<span class="class">.android</span><span class="class">.cursor</span><span class="class">.dir</span></span><br></pre></td></tr></table></figure>
<p>对于单行数据，通常是：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vnd<span class="class">.android</span><span class="class">.cursor</span><span class="class">.item</span></span><br></pre></td></tr></table></figure>
<p>子类型是提供者指定的。Android内置提供者一般都有一个简单subtype。例如，当联系人应用为一个电话号码创建一行的时候，它为该行设置这样的MIME类型：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vnd<span class="class">.android</span><span class="class">.cursor</span><span class="class">.item</span>/phone_v2</span><br></pre></td></tr></table></figure>
<p>注意到子类型仅仅是phone_v2</p>
<p>其他的提供者开发者或许创建它们自己的子类型格式，基于提供者的authority和表名称。例如，考虑一个提供者包含列车时刻表。提供者的authority是com.example.trains，它包含了表Line1，Line2，Line3.对应于内容URI：</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">content:</span>//<span class="keyword">com</span>.example.trains/Line1</span><br></pre></td></tr></table></figure>
<p>提供者可能返回如下MIME类型：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vnd<span class="class">.android</span><span class="class">.cursor</span><span class="class">.dir</span>/vnd<span class="class">.example</span><span class="class">.line1</span></span><br></pre></td></tr></table></figure>
<p>对于如下content URI，</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">content:</span>//<span class="keyword">com</span>.example.trains/Line2/<span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>提供者或许返回</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vnd<span class="class">.android</span><span class="class">.cursor</span><span class="class">.item</span>/vnd<span class="class">.example</span><span class="class">.line2</span></span><br></pre></td></tr></table></figure>
<p>大部分内容提供者为他们使用的MIME类型定义contract类常量。例如，联系人提供者的contract类ContactsContract.RawContacts类，为一行联系人数据的MIME类型定义了CONTENT_ITEM_TYPE常量。</p>
<p>单行数据的内容URI在Content URIs一节中进行了介绍。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>学习了一段时间Android开发，其他的三大组件都稍微了解了一下，唯独这个Content Provider， 还一点也没了解过。 现在就通过翻译API Guide来了解下Content Provider吧。</p>
</blockquote>
<p]]>
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Content Provider" scheme="http://yoursite.com/tags/Content-Provider/"/>
    
      <category term="翻译" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Markdown语法学习笔记]]></title>
    <link href="http://yoursite.com/2015/09/26/Markdown-Grammar/"/>
    <id>http://yoursite.com/2015/09/26/Markdown-Grammar/</id>
    <published>2015-09-26T03:00:18.704Z</published>
    <updated>2015-09-14T05:20:27.730Z</updated>
    <content type="html"><![CDATA[<p>标签（空格分隔）： Markdown 学习笔记</p>
<hr>
<h2 id="1、文本的样式">1、文本的样式</h2><hr>
<h3 id="1-1、加粗">1.1、加粗</h3><p><strong>语法</strong>： **需要加粗的文本**<br><strong>效果</strong>： <strong>粗体文本</strong></p>
<hr>
<h3 id="1-2、斜体">1.2、斜体</h3><p><strong>语法</strong>： *需要设置成斜体的文字*<br><strong>效果</strong>： <em>斜体文字</em></p>
<hr>
<h3 id="1-3、_删除线">1.3、 删除线</h3><p><strong>语法</strong>： ~ ~文字~ ~ （<strong>注意：中间无空格</strong>）<br><strong>效果</strong>： <del>文字</del></p>
<hr>
<h3 id="1-4、_超链接">1.4、 超链接</h3><p><strong>效果</strong>： <a href="http://202.110.203.12" target="_blank" rel="external">超链接标题</a></p>
<hr>
<h3 id="1-5、_图片">1.5、 图片</h3><p><strong>效果</strong>： <img src="/img/barcode.png" alt="图片替代文本" title="图片标题"></p>
<hr>
<h3 id="1-6、代码">1.6、代码</h3><p><strong>代码</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">"Hello, World!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>inline 代码</strong><br><code>System.out.println(&quot;Hello, World&quot;);</code></p>
<hr>
<h3 id="1-7、_列表">1.7、 列表</h3><p><strong>效果</strong>： </p>
<ul>
<li>Item1</li>
<li>Item2</li>
<li>Item3</li>
</ul>
<p><strong>注意！-前面一定要有个空格！</strong></p>
<ul>
<li>Item1</li>
<li>Item2</li>
<li>Item3</li>
</ul>
<ul>
<li>Item1</li>
<li>Item2</li>
<li>Item3</li>
</ul>
<p><strong>有序列表</strong></p>
<ol>
<li>Item1</li>
<li>Item2</li>
<li>Item3</li>
</ol>
<hr>
<h3 id="1-8_引用">1.8 引用</h3><p><strong>效果</strong>： </p>
<blockquote>
<p>装B也是一种品质</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>标签（空格分隔）： Markdown 学习笔记</p>
<hr>
<h2 id="1、文本的样式">1、文本的样式</h2><hr>
<h3 id="1-1、加粗">1.1、加粗</h3><p><strong>语法</strong>： **需要加粗的文本**<br><str]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[在aws免费云服务上安装Shadowsocks以及vpn]]></title>
    <link href="http://yoursite.com/2015/09/26/deploy-vpn-shadowsocks-on-aws/"/>
    <id>http://yoursite.com/2015/09/26/deploy-vpn-shadowsocks-on-aws/</id>
    <published>2015-09-26T03:00:18.680Z</published>
    <updated>2015-09-17T00:59:59.082Z</updated>
    <content type="html"><![CDATA[<hr>
<p>aws现在提供一年的免费试用云服务哦，不过只能选择最小的那种服务，而且据说一年以后不会进行任何提醒就会开始扣费，所以一定要小心。申请的时候要绑定信用卡，并且会扣除1美元，不要忘记还……</p>
<p>申请完成以后可以申请一个弹性IP，否则你的服务器的公网IP是会变的，重启一次服务器IP就变了，所以为了IP固定不变，可以申请一个弹性IP。但是你申请的弹性IP，一定要及时绑定到你的运行着的服务器上，不然是要收费的。</p>
<p>我选择的Ubuntu server，所以在上面安装vpn和shadowsocks都简单的要命……</p>
<h2 id="shadowsocks"><strong>shadowsocks</strong></h2><h3 id="安装"><strong>安装</strong></h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get <span class="keyword">install</span> python-pip</span><br><span class="line">pip <span class="keyword">install</span> shadowsocks</span><br></pre></td></tr></table></figure>
<h3 id="使用"><strong>使用</strong></h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -<span class="tag">p</span> <span class="number">443</span> -k password -m rc4-md5</span><br></pre></td></tr></table></figure>
<p>如果要后台运行：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssserver -p 443 -k password -<span class="keyword">m</span> rc4-md5 --user nobody -<span class="keyword">d</span> start</span><br></pre></td></tr></table></figure>
<p>如果要停止：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssserver <span class="operator">-d</span> stop</span><br></pre></td></tr></table></figure>
<p>如果要检查日志：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo less /<span class="built_in">var</span>/<span class="keyword">log</span>/shadowsocks<span class="built_in">.</span><span class="keyword">log</span></span><br></pre></td></tr></table></figure>
<p><strong>参考</strong>： <a href="https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E" target="_blank" rel="external">shadowsocks github</a></p>
<h2 id="vpn安装"><strong>vpn安装</strong></h2><p>直接参考这个：<a href="http://www.bitbottle.com/archives/132.html/2" target="_blank" rel="external">利用AWS免费搭建私人VPN</a></p>
<hr>
<p><strong>切记</strong>，这两个安装完了以后，不要忘记打开防火墙的相应端口。</p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<p>aws现在提供一年的免费试用云服务哦，不过只能选择最小的那种服务，而且据说一年以后不会进行任何提醒就会开始扣费，所以一定要小心。申请的时候要绑定信用卡，并且会扣除1美元，不要忘记还……</p>
<p>申请完成以后可以申请一个弹性IP，否则你的服务器的公网IP是会变]]>
    </summary>
    
      <category term="Shadowsocks" scheme="http://yoursite.com/tags/Shadowsocks/"/>
    
      <category term="aws" scheme="http://yoursite.com/tags/aws/"/>
    
      <category term="免费" scheme="http://yoursite.com/tags/%E5%85%8D%E8%B4%B9/"/>
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在Github上搭建自己的个人Blog]]></title>
    <link href="http://yoursite.com/2015/09/26/build-my-blog/"/>
    <id>http://yoursite.com/2015/09/26/build-my-blog/</id>
    <published>2015-09-26T03:00:18.651Z</published>
    <updated>2015-09-11T07:42:19.209Z</updated>
    <content type="html"><![CDATA[<p>最近闲来无事，试着在GitHub上搭建一个个人Blog。也没什么大的想法，简单的记录一些流水账吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近闲来无事，试着在GitHub上搭建一个个人Blog。也没什么大的想法，简单的记录一些流水账吧。</p>
]]>
    </summary>
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[好玩的Android版本代号]]></title>
    <link href="http://yoursite.com/2015/09/26/Android-version/"/>
    <id>http://yoursite.com/2015/09/26/Android-version/</id>
    <published>2015-09-26T03:00:18.642Z</published>
    <updated>2015-09-15T02:35:25.416Z</updated>
    <content type="html"><![CDATA[<hr>
<ul>
<li>Android 1.5        Cupcake                纸杯蛋糕</li>
<li>Android 1.6         Donut                 甜甜圈</li>
<li>Android 2.0/2.1     Eclair                 闪电泡芙</li>
<li>Android 2.2         Froyo                冻酸奶</li>
<li>Android 2.3        GingerBread            姜人饼</li>
<li>Android 3.0        Honeycomb            蜂巢</li>
<li>Android 4.0        Ice Cream Sandwich    冰淇淋三明治</li>
<li>Android 5.0/5.1    Lollipop            棒棒糖</li>
<li>Android 6.0        Marshmallow            棉花糖</li>
</ul>
<p>猜猜下个版本会叫什么名字……</p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<ul>
<li>Android 1.5        Cupcake                纸杯蛋糕</li>
<li>Android 1.6         Donut                 甜甜圈</li>
<li>Android 2.0/2.1]]>
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="代码" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在ActionBar中提供分享按钮]]></title>
    <link href="http://yoursite.com/2015/09/26/share-action-provider/"/>
    <id>http://yoursite.com/2015/09/26/share-action-provider/</id>
    <published>2015-09-26T03:00:18.632Z</published>
    <updated>2015-09-15T07:10:18.216Z</updated>
    <content type="html"><![CDATA[<hr>
<p>在ActionBar中提供分享按钮<br>在<strong>Android 4.0</strong>中，提供<strong>分享</strong>按钮变得更加简单，因为<strong>Android 4.0</strong>引入了<strong>ActionProvider</strong>。<br>我们只需要提供一个share intent，然后其他的东西都由ShareActionProvider来完成。<br>为了使用ShareActionProvider，只需要在定义Activity菜单的资源文件中加入一个item，如以下代码</p>
<pre><code>&lt;menu xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;
    &lt;<span class="property">item</span>
            android:<span class="property">id</span>=<span class="string">"@+id/menu_item_share"</span>
            android:showAsAction=<span class="string">"ifRoom"</span>
            android:title=<span class="string">"Share"</span>
            android:actionProviderClass=
                <span class="string">"android.widget.ShareActionProvider"</span> /&gt;
    ...
&lt;/menu&gt;
</code></pre><p>然后呢，我们要给ShareActionProvider设置一个Share Intent。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ShareActionProvider mShareActionProvider;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Inflate menu resource file.</span></span><br><span class="line">    getMenuInflater().inflate(R.menu.share_menu, menu);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Locate MenuItem with ShareActionProvider</span></span><br><span class="line">    MenuItem item = menu.findItem(R.id.menu_item_share);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fetch and store ShareActionProvider</span></span><br><span class="line">    mShareActionProvider = (ShareActionProvider) item.getActionProvider();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return true to display menu</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Call to update the share intent</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setShareIntent</span><span class="params">(Intent shareIntent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mShareActionProvider != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mShareActionProvider.setShareIntent(shareIntent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>注意：</strong> 如果你使用<strong>Support Library</strong>，那么使用上面的代码的结果就是应用程序错误</p>
<p>在使用<strong>Support Library</strong>的时候，代码应该是这样的：</p>
<pre><code><span class="tag">&lt;<span class="title">menu</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>
      <span class="attribute">xmlns:yourapp</span>=<span class="value">"http://schemas.android.com/apk/res-auto"</span> &gt;</span>
    <span class="tag">&lt;<span class="title">item</span> <span class="attribute">android:id</span>=<span class="value">"@+id/action_share"</span>
          <span class="attribute">android:title</span>=<span class="value">"@string/share"</span>
          <span class="attribute">app:showAsAction</span>=<span class="value">"ifRoom"</span>
          <span class="attribute">app:actionProviderClass</span>=<span class="value">"android.support.v7.widget.ShareActionProvider"</span>
          /&gt;</span>
    ...
<span class="tag">&lt;/<span class="title">menu</span>&gt;</span>
</code></pre><p>而相应的java代码应该是这样的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">    getMenuInflater().inflate(R.menu.main_activity_actions, menu);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set up ShareActionProvider's default share intent</span></span><br><span class="line">    MenuItem shareItem = menu.findItem(R.id.action_share);</span><br><span class="line">	<span class="comment">//这里，是关键的不同</span></span><br><span class="line">    mShareActionProvider = (ShareActionProvider)</span><br><span class="line">            MenuItemCompat.getActionProvider(shareItem);</span><br><span class="line">    mShareActionProvider.setShareIntent(getDefaultIntent());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onCreateOptionsMenu(menu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<p>在ActionBar中提供分享按钮<br>在<strong>Android 4.0</strong>中，提供<strong>分享</strong>按钮变得更加简单，因为<strong>Android 4.0</strong>引入了<strong>ActionPro]]>
    </summary>
    
      <category term="ActionBar" scheme="http://yoursite.com/tags/ActionBar/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Training" scheme="http://yoursite.com/tags/Training/"/>
    
      <category term="分享" scheme="http://yoursite.com/tags/%E5%88%86%E4%BA%AB/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio 快捷键整理分享-SadieYu]]></title>
    <link href="http://yoursite.com/2015/09/26/android-studio-shortcuts/"/>
    <id>http://yoursite.com/2015/09/26/android-studio-shortcuts/</id>
    <published>2015-09-26T02:58:40.444Z</published>
    <updated>2015-09-21T02:16:33.237Z</updated>
    <content type="html"><![CDATA[<p>Alt+回车 导入包,自动修正</p>
<p>Ctrl+N   查找类</p>
<p>Ctrl+Shift+N 查找文件</p>
<p>Ctrl+Alt+L  格式化代码</p>
<p>Ctrl+Alt+O 优化导入的类和包</p>
<p>Alt+Insert 生成代码(如get,set方法,构造函数等)</p>
<p>Ctrl+E或者Alt+Shift+C  最近更改的代码</p>
<p>Ctrl+R 替换文本</p>
<p>Ctrl+F 查找文本</p>
<p>Ctrl+Shift+Space 自动补全代码</p>
<p>Ctrl+空格 代码提示</p>
<p>Ctrl+Alt+Space 类名或接口名提示</p>
<p>Ctrl+P 方法参数提示</p>
<p>Ctrl+Shift+Alt+N 查找类中的方法或变量</p>
<p>Alt+Shift+C 对比最近修改的代码</p>
<p>Shift+F6  重构-重命名</p>
<p>Ctrl+Shift+先上键</p>
<p>Ctrl+X 删除行</p>
<p>Ctrl+D 复制行</p>
<p>Ctrl+/ 或 Ctrl+Shift+/  注释（// 或者 ）</p>
<p>Ctrl+J  自动代码</p>
<p>Ctrl+E 最近打开的文件</p>
<p>Ctrl+H 显示类结构图</p>
<p>Ctrl+Q 显示注释文档</p>
<p>Alt+F1 查找代码所在位置</p>
<p>Alt+1 快速打开或隐藏工程面板</p>
<p>Ctrl+Alt+ left/right 返回至上次浏览的位置</p>
<p>Alt+ left/right 切换代码视图</p>
<p>Alt+ Up/Down 在方法间快速移动定位</p>
<p>Ctrl+Shift+Up/Down 代码向上/下移动。</p>
<p>F2 或Shift+F2 高亮错误或警告快速定位</p>
<p>代码标签输入完成后，按Tab，生成代码。</p>
<p>选中文本，按Ctrl+Shift+F7 ，高亮显示所有该文本，按Esc高亮消失。</p>
<p>Ctrl+W 选中代码，连续按会有其他效果</p>
<p>选中文本，按Alt+F3 ，逐个往下查找相同文本，并高亮显示。</p>
<p>Ctrl+Up/Down 光标跳转到第一行或最后一行下</p>
<p>Ctrl+B 快速打开光标处的类或方法 </p>
<p>最常用快捷键</p>
<p>1.Ctrl＋E，可以显示最近编辑的文件列表</p>
<p>2.Shift＋Click可以关闭文件</p>
<p>3.Ctrl＋[或]可以跳到大括号的开头结尾</p>
<p>4.Ctrl＋Shift＋Backspace可以跳转到上次编辑的地方</p>
<p>5.Ctrl＋F12，可以显示当前文件的结构</p>
<p>6.Ctrl＋F7可以查询当前元素在当前文件中的引用，然后按F3可以选择</p>
<p>7.Ctrl＋N，可以快速打开类</p>
<p>8.Ctrl＋Shift＋N，可以快速打开文件</p>
<p>9.Alt＋Q可以看到当前方法的声明</p>
<p>10.Ctrl＋W可以选择单词继而语句继而行继而函数</p>
<p>11.Alt＋F1可以将正在编辑的元素在各个面板中定位</p>
<p>12.Ctrl＋P，可以显示参数信息</p>
<p>13.Ctrl＋Shift＋Insert可以选择剪贴板内容并插入</p>
<p>14.Alt＋Insert可以生成构造器/Getter/Setter等</p>
<p>15.Ctrl＋Alt＋V 可以引入变量。例如把括号内的SQL赋成一个变量</p>
<p>16.Ctrl＋Alt＋T可以把代码包在一块内，例如try/catch</p>
<p>17.Alt＋Up and Alt＋Down可在方法间快速移动</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Alt+回车 导入包,自动修正</p>
<p>Ctrl+N   查找类</p>
<p>Ctrl+Shift+N 查找文件</p>
<p>Ctrl+Alt+L  格式化代码</p>
<p>Ctrl+Alt+O 优化导入的类和包</p>
<p>Alt+Insert 生成代码(如]]>
    </summary>
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
      <category term="快捷键" scheme="http://yoursite.com/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo 学习笔记]]></title>
    <link href="http://yoursite.com/2015/09/26/hexo-learning/"/>
    <id>http://yoursite.com/2015/09/26/hexo-learning/</id>
    <published>2015-09-26T02:55:29.583Z</published>
    <updated>2015-09-17T03:00:37.706Z</updated>
    <content type="html"><![CDATA[<hr>
<p><strong>重要参考：</strong> <a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="external">hexo写作指南</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<p><strong>重要参考：</strong> <a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="external">hexo写作指南</a></p>
]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2015/09/26/hello-world/"/>
    <id>http://yoursite.com/2015/09/26/hello-world/</id>
    <published>2015-09-26T02:55:29.575Z</published>
    <updated>2015-09-11T05:51:21.512Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Loaders]]></title>
    <link href="http://yoursite.com/2015/09/24/loaders-in-android/"/>
    <id>http://yoursite.com/2015/09/24/loaders-in-android/</id>
    <published>2015-09-24T00:00:00.000Z</published>
    <updated>2015-09-25T08:43:31.052Z</updated>
    <content type="html"><![CDATA[<hr>
<blockquote>
<p>这篇文章是对developer.android.com上<strong>API Guides</strong>中关于Loaders内容的翻译，肯定网上已经有人翻译，但是反正自己要看，所以不如顺便翻译一遍</p>
</blockquote>
<p>Loaders是Android 3.0引入的，它可以使得在Activity或者Fragment中<strong>异步加载数据</strong>变得更加简单。Loaders具有以下的特征：</p>
<ul>
<li>在每个Activity或者Fragment中都可以使用</li>
<li>他们可以提供数据的异步加载</li>
<li>他们可以监控数据源并且当数据发生变化时传送新的结果</li>
<li>在配置发生变化的时候，他们会自动重新连接到最后的loader cursor，因此，Loaders不需要重新查询数据</li>
</ul>
<h2 id="Loader_API_概述">Loader API 概述</h2><p>在应用中使用Loader主要涉及到以下几个类和接口。下表对这些类和接口进行了总结：</p>
<table>
<thead>
<tr>
<th>类/接口</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>LoaderManager</td>
<td>抽象类，与Activity或者Fragment关联在一起，用来管理Loader的实例。这可以帮助应用程序管理长时间运行的操作，配合Activity和Fragment的生命周期。最常用的情况是和CursorLoader一起使用，但是应用可以自由的编写自己的Loader来加载各种其他数据。<br>每个Activity或者Fragment只能有一个LoaderManager，但是每个LoaderManager可以有多个Loader。</td>
</tr>
<tr>
<td>LoaderManager.LoaderCallbacks</td>
<td>一个回调接口，客户端可以使用这个接口和LoaderManager进行交互。例如，你可以使用onCreateLoader()回调方法来创建一个新的Loader。</td>
</tr>
<tr>
<td>Loader</td>
<td>抽象类，用来执行数据的异步加载。Loader的基类。通常你会使用CursorLoader，但是你也可以使用自定义的子类。当Loaders是活动状态时，他们可以监控他们的数据源，并且当数据源内容变化时发布新的结果</td>
</tr>
<tr>
<td>AsyncTaskLoader</td>
<td>一个抽象的Loader，使用AsyncTask来进行异步加载</td>
</tr>
<tr>
<td>CursorLoader</td>
<td>AsyncTaskLoader的一个子类，用于查询ContentResolver并且返回一个Cursor。这个类使用标准方式实现了Loader协议，用于查询Cursors，它构建于AsyncTaskLoader之上在后台线程中查询游标以免阻塞UI线程。使用Loader的最好的方式就是从ContentProvider异步加载数据，而不是从fragment或者activity中执行<strong>managed query</strong>。</td>
</tr>
</tbody>
</table>
<p>上面表格中的类和接口是你在应用中实现Loader的基础组件。你并不需要在每个Loader中都使用到上述类或者接口，但是为了初始化Loader以及实现Loader的子类（就像CursorLoader），你总是会使用到LoaderManager。以下各节介绍了在应用中你应该如何使用这些类和接口。</p>
<h2 id="在应用中使用Loader">在应用中使用Loader</h2><p>本节介绍如何在Android应用中使用Loaders。使用Loaders的应用一般应该包含以下：</p>
<ul>
<li>一个Activity或者Fragment</li>
<li>一个LoaderManager的实例</li>
<li>一个CursorLoader从ContentProvider加载数据。你同样可以从Loader或者AsyncTaskLoader派生实现自己的Loader子类来从其他数据源加载数据。</li>
<li>实现LoaderManager.LoaderCallbacks接口。你应该在这里来创建新的Loader实例，并且管理对已经存在的Loader实例的引用。</li>
<li>采用某种方式展示Loader的数据，例如使用SimpleCursorAdapter。</li>
<li>一个数据源，例如当你使用CursorLoader的时候，就是ContentProvider</li>
</ul>
<h2 id="启动一个Loader">启动一个Loader</h2><p>在Activity或者Fragment中，LoaderManager管理一个或者多个Loader的实例。每个LoaderManager只能有一个LoaderManager。<br>一般应该在Activity或者Fragment的onCreate()方法中初始化一个Loader，或者在Fragment的onActivityCreate()方法中。使用如下方法来初始化：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//准备Loader。要么重新连接一个已经存在的Loader，要么开始一个新的Loader</span></span><br><span class="line">getLoaderManager().initLoader(<span class="number">0</span>,<span class="keyword">null</span>,<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure></p>
<p>initLoader()方法需要以下几个参数：</p>
<ul>
<li>一个唯一的ID用来标识这个Loader。例如在这个例子中是0.</li>
<li>第二个参数是可选的。在构建Loader时使用，如果已经存在一个Loader，那这个参数会被忽略掉。（这个例子中是null）</li>
<li>第三个参数是LoaderManager.LoaderCallbacks的实现，LoaderManager会调用实现类的回调方法来报告Loader的事件。在本例中，当前类实现了Loadermanager.LoaderCallbacks接口，所以本例传递this。</li>
</ul>
<p>initLoader()调用保证了一个Loader被初始化并处于激活状态。它可能有两种情况：</p>
<ul>
<li>如果该ID指定的Loader已经存在，那么上次创建Loader将会被重新使用。</li>
<li>如果该ID制定的Loader并不存在，那么initLoader()将会调用LoaderManager.LoaderCallbacks接口的onCreateLoader()方法。你需要实现这个方法并且返回一个新的Loader。需要更多的解释，参见onCreateLoader。</li>
</ul>
<p>无论哪种情况，指定的LoaderManager.LoaderCallbacks实现都会和loader进行关联，并且当loader的状态发生改变是被调用。如果在调用时，调用者处于”started”状态，并且请求的Loader已经存在并且生成了它的数据，那么系统将立即调用onLoadFinished()（在initLoader()方法中），所以你必须为这种情况做准备。参考onLoadFinished()来获取更多信息。</p>
<p>注意，initLoader()方法会返回创建的Loader，但是你却不必去保存它的引用。LoaderManager会自动管理Loader的生命周期。在合适的时候，LoaderManager会开始或者结束加载，并且会维护Loader的状态以及他们关联的内容。你极少需要直接和Loader打交道（尽管有使用loader的方法来精确的对Loader的行为进行调优的例子，参见LoaderThrottle例子。）更多的，在加载过程中你应该使用LoaderManager.LoaderCallbacks的方法来进行交互，当特定的事件发生的时候。要得到更多信息，参见<em>“使用LoaderManager回调方法”</em></p>
<h2 id="重新开始一个Loader">重新开始一个Loader</h2><p>当你使用initLoader()时，如上所述，如果指定的ID已经存在一个Loader，那么会使用它。如果不存在，就会创建一个新的Loader。但是一些情况下，你可能会想放弃旧数据并且重新开始。</p>
<p>为了丢弃旧数据，你可以使用restartLoader()。例如，SearchView.OnQueryTextListener在用户改变了查询关键词后重新启动了loader。loader需要重启，这样它才能获取到查询过滤器来开始一个新的查询。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onQueryTextChanged</span><span class="params">(String newText)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Called when the action bar search text has changed.  Update</span></span><br><span class="line">    <span class="comment">// the search filter, and restart the loader to do a new query</span></span><br><span class="line">    <span class="comment">// with this filter.</span></span><br><span class="line">    mCurFilter = !TextUtils.isEmpty(newText) ? newText : <span class="keyword">null</span>;</span><br><span class="line">    getLoaderManager().restartLoader(<span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="使用LoaderManager回调">使用LoaderManager回调</h2><p>LoaderManager.LoaderCallbacks是一个回调接口，用来让客户端和LoaderManager交互。<br>Loaders，特别是CursorLoader，在停止后会保持数据。这使得应用可以跨过Activity或者Fragment的生命周期函数，如onStop()和onStart()，保持数据，所以当用户返回到应用时，不必等待数据重新加载。使用LoaderManager.LoaderCallbacks回调方法来获取合适创建一个新的loader，以及告诉应用何时停止使用一个loader的数据等。</p>
<p>LoaderManager.LoaderCallbacks包括以下方法：</p>
<ul>
<li>onCreateLoader() - 对于给定的ID，初始化并且返回一个新的loader</li>
<li>onLoadFinished() - 当已经创建的loader完成了加载时触发</li>
<li>onLoaderReset()  - 当已经创建的loader被重置时触发，这样会导致它的数据变得不可用。<br>这些方法在随后的几节中进行更加详细的描述。</li>
</ul>
<h2 id="onCreateLoader">onCreateLoader</h2><p>当你试图访问一个loader（例如，通过initLoader()）的时候，它会检查指定的ID是否已经存在一个loader。如果不存在，它就触发LoaderManager.LoaderCallbacks的onCreateLoader()方法。你应该在这个回调方法中创建一个新的loader。一般的，应该使用CursorLoader，但是你也可以实现你自己的Loader子类。</p>
<p>在这个例子里，onCreateLoader()回调方法创建了一个CursorLoader。你必须使用CursorLoader的构造方法来创建实例，这个方法需要查询ContentProvider的所有数据。确切的说，它需要：</p>
<ul>
<li>uri                 - 需要获取的内容的uri</li>
<li>projection        - 需要返回的列的列表。如果传递null，那么会返回所有列，这样可能效率不高。</li>
<li>selection        -  一个过滤器用来定义返回哪些行， 以sql语句where子句的格式来定义（不包括Where关键字本身）。 如果传递null将会返回所有列。</li>
<li>selectionArgs    - 你可以在selection参数中包含?符号，而这些?符号将会被selectionArgs中的值所替换，按照他们在selection中出现的顺序。这些值被限制为字符串。</li>
<li>sortOrder        - 如何对返回的数据进行排序，以sql order by子句的形式进行格式化。如果传递null，那么结果将是没有排序的。</li>
</ul>
<p>例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// If non-null, this is the current filter the user has provided.</span></span><br><span class="line">String mCurFilter;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">public</span> Loader&lt;Cursor&gt; <span class="title">onCreateLoader</span><span class="params">(<span class="keyword">int</span> id, Bundle args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// This is called when a new Loader needs to be created.  This</span></span><br><span class="line">    <span class="comment">// sample only has one Loader, so we don't care about the ID.</span></span><br><span class="line">    <span class="comment">// First, pick the base URI to use depending on whether we are</span></span><br><span class="line">    <span class="comment">// currently filtering.</span></span><br><span class="line">    Uri baseUri;</span><br><span class="line">    <span class="keyword">if</span> (mCurFilter != <span class="keyword">null</span>) &#123;</span><br><span class="line">        baseUri = Uri.withAppendedPath(Contacts.CONTENT_FILTER_URI,</span><br><span class="line">                  Uri.encode(mCurFilter));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        baseUri = Contacts.CONTENT_URI;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Now create and return a CursorLoader that will take care of</span></span><br><span class="line">    <span class="comment">// creating a Cursor for the data being displayed.</span></span><br><span class="line">    String select = <span class="string">"(("</span> + Contacts.DISPLAY_NAME + <span class="string">" NOTNULL) AND ("</span></span><br><span class="line">            + Contacts.HAS_PHONE_NUMBER + <span class="string">"=1) AND ("</span></span><br><span class="line">            + Contacts.DISPLAY_NAME + <span class="string">" != '' ))"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CursorLoader(getActivity(), baseUri,</span><br><span class="line">            CONTACTS_SUMMARY_PROJECTION, select, <span class="keyword">null</span>,</span><br><span class="line">            Contacts.DISPLAY_NAME + <span class="string">" COLLATE LOCALIZED ASC"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="onLoadFinished">onLoadFinished</h2><p>当一个已经创建的loader完成数据加载后会触发该方法。这个方法保证会早于该loader的旧数据的释放。基于这一点，你应该清除所有对旧数据的使用（既然它马上就要被释放掉），但是你一定不能自己去释放这些数据，因为它的loader负责这些事情。<br>一旦loader得知应用不再运行，loader会释放数据。例如，如果数据是一个curosr，来自于CursorLoader，你不应该自己调用close()方法。如果cursor被放置于CursorAdapter中，那么你应该使用swapCursor()方法，这样旧数据不会被关闭。<br>例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This is the Adapter being used to display the list's data.</span></span><br><span class="line">SimpleCursorAdapter mAdapter;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadFinished</span><span class="params">(Loader&lt;Cursor&gt; loader, Cursor data)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Swap the new cursor in.  (The framework will take care of closing the</span></span><br><span class="line">    <span class="comment">// old cursor once we return.)</span></span><br><span class="line">    mAdapter.swapCursor(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="onLoaderReset">onLoaderReset</h2><p>当一个loader被重置时，这个方法会被触发，这会导致loader中的数据变得不可用。<br>这个回调方法让你可以找出哪些数据即将被释放，所以你可以不再使用这些数据。<br>下面的例子用null作为参数来调用swapCursor()</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This is the Adapter being used to display the list's data.</span></span><br><span class="line">SimpleCursorAdapter mAdapter;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onLoaderReset</span><span class="params">(Loader&lt;Cursor&gt; loader)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// This is called when the last Cursor provided to onLoadFinished()</span></span><br><span class="line">	<span class="comment">// above is about to be closed.  We need to make sure we are no</span></span><br><span class="line">	<span class="comment">// longer using it.</span></span><br><span class="line">	mAdapter.swapCursor(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="例子">例子</h2><p>作为一个示例，这里有一个完整的实现，它使用Fragment来展示一个ListView，ListView中包含了联系人ContentProvider的查询结果。本例使用了一个CursorLoader来管理查询。</p>
<p>对于一个访问用户的联系人的应用，就像这个例子，应该声明需要READ_CONTACTS权限。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CursorLoaderListFragment</span> <span class="keyword">extends</span> <span class="title">ListFragment</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title">OnQueryTextListener</span>, <span class="title">LoaderManager</span>.<span class="title">LoaderCallbacks</span>&lt;<span class="title">Cursor</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This is the Adapter being used to display the list's data.</span></span><br><span class="line">    SimpleCursorAdapter mAdapter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If non-null, this is the current filter the user has provided.</span></span><br><span class="line">    String mCurFilter;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Give some text to display if there is no data.  In a real</span></span><br><span class="line">        <span class="comment">// application this would come from a resource.</span></span><br><span class="line">        setEmptyText(<span class="string">"No phone numbers"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We have a menu item to show in action bar.</span></span><br><span class="line">        setHasOptionsMenu(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create an empty adapter we will use to display the loaded data.</span></span><br><span class="line">        mAdapter = <span class="keyword">new</span> SimpleCursorAdapter(getActivity(),</span><br><span class="line">                android.R.layout.simple_list_item_2, <span class="keyword">null</span>,</span><br><span class="line">                <span class="keyword">new</span> String[] &#123; Contacts.DISPLAY_NAME, Contacts.CONTACT_STATUS &#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; android.R.id.text1, android.R.id.text2 &#125;, <span class="number">0</span>);</span><br><span class="line">        setListAdapter(mAdapter);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Prepare the loader.  Either re-connect with an existing one,</span></span><br><span class="line">        <span class="comment">// or start a new one.</span></span><br><span class="line">        getLoaderManager().initLoader(<span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu, MenuInflater inflater)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Place an action bar item for searching.</span></span><br><span class="line">        MenuItem item = menu.add(<span class="string">"Search"</span>);</span><br><span class="line">        item.setIcon(android.R.drawable.ic_menu_search);</span><br><span class="line">        item.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);</span><br><span class="line">        SearchView sv = <span class="keyword">new</span> SearchView(getActivity());</span><br><span class="line">        sv.setOnQueryTextListener(<span class="keyword">this</span>);</span><br><span class="line">        item.setActionView(sv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onQueryTextChange</span><span class="params">(String newText)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Called when the action bar search text has changed.  Update</span></span><br><span class="line">        <span class="comment">// the search filter, and restart the loader to do a new query</span></span><br><span class="line">        <span class="comment">// with this filter.</span></span><br><span class="line">        mCurFilter = !TextUtils.isEmpty(newText) ? newText : <span class="keyword">null</span>;</span><br><span class="line">        getLoaderManager().restartLoader(<span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onQueryTextSubmit</span><span class="params">(String query)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Don't care about this.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onListItemClick</span><span class="params">(ListView l, View v, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Insert desired behavior here.</span></span><br><span class="line">        Log.i(<span class="string">"FragmentComplexList"</span>, <span class="string">"Item clicked: "</span> + id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// These are the Contacts rows that we will retrieve.</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String[] CONTACTS_SUMMARY_PROJECTION = <span class="keyword">new</span> String[] &#123;</span><br><span class="line">        Contacts._ID,</span><br><span class="line">        Contacts.DISPLAY_NAME,</span><br><span class="line">        Contacts.CONTACT_STATUS,</span><br><span class="line">        Contacts.CONTACT_PRESENCE,</span><br><span class="line">        Contacts.PHOTO_ID,</span><br><span class="line">        Contacts.LOOKUP_KEY,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Loader&lt;Cursor&gt; <span class="title">onCreateLoader</span><span class="params">(<span class="keyword">int</span> id, Bundle args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// This is called when a new Loader needs to be created.  This</span></span><br><span class="line">        <span class="comment">// sample only has one Loader, so we don't care about the ID.</span></span><br><span class="line">        <span class="comment">// First, pick the base URI to use depending on whether we are</span></span><br><span class="line">        <span class="comment">// currently filtering.</span></span><br><span class="line">        Uri baseUri;</span><br><span class="line">        <span class="keyword">if</span> (mCurFilter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            baseUri = Uri.withAppendedPath(Contacts.CONTENT_FILTER_URI,</span><br><span class="line">                    Uri.encode(mCurFilter));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            baseUri = Contacts.CONTENT_URI;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Now create and return a CursorLoader that will take care of</span></span><br><span class="line">        <span class="comment">// creating a Cursor for the data being displayed.</span></span><br><span class="line">        String select = <span class="string">"(("</span> + Contacts.DISPLAY_NAME + <span class="string">" NOTNULL) AND ("</span></span><br><span class="line">                + Contacts.HAS_PHONE_NUMBER + <span class="string">"=1) AND ("</span></span><br><span class="line">                + Contacts.DISPLAY_NAME + <span class="string">" != '' ))"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CursorLoader(getActivity(), baseUri,</span><br><span class="line">                CONTACTS_SUMMARY_PROJECTION, select, <span class="keyword">null</span>,</span><br><span class="line">                Contacts.DISPLAY_NAME + <span class="string">" COLLATE LOCALIZED ASC"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadFinished</span><span class="params">(Loader&lt;Cursor&gt; loader, Cursor data)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Swap the new cursor in.  (The framework will take care of closing the</span></span><br><span class="line">        <span class="comment">// old cursor once we return.)</span></span><br><span class="line">        mAdapter.swapCursor(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoaderReset</span><span class="params">(Loader&lt;Cursor&gt; loader)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// This is called when the last Cursor provided to onLoadFinished()</span></span><br><span class="line">        <span class="comment">// above is about to be closed.  We need to make sure we are no</span></span><br><span class="line">        <span class="comment">// longer using it.</span></span><br><span class="line">        mAdapter.swapCursor(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>我测试的<a href="/files/contact.zip">小例子</a>，AndroidStudio项目</p>
</blockquote>
<h2 id="更多例子">更多例子</h2><p>在ApiDemo中有几个不同的例子可以验证如何使用loaders</p>
<ul>
<li>LoaderCursor        - 以上示例代码的完整版本</li>
<li><p>LoaderThrottle    - 使用节流技术来减少数据改变时查询次数的例子</p>
<p>关于下载和安装SDK示例的更多信息，参考<a href="http://developer.android.com/resources/samples/get.html" target="_blank" rel="external">“Gettting the Samples”</a></p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<blockquote>
<p>这篇文章是对developer.android.com上<strong>API Guides</strong>中关于Loaders内容的翻译，肯定网上已经有人翻译，但是反正自己要看，所以不如顺便翻译一遍</p>
</blockquote>]]>
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Loaders" scheme="http://yoursite.com/tags/Loaders/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git学习笔记一]]></title>
    <link href="http://yoursite.com/2015/09/17/git-learning/"/>
    <id>http://yoursite.com/2015/09/17/git-learning/</id>
    <published>2015-09-17T06:52:00.000Z</published>
    <updated>2015-09-17T06:52:40.767Z</updated>
    <content type="html"><![CDATA[<hr>
<h2 id="1-创建版本库"><strong>1.创建版本库</strong></h2><p>首先创建一个空的目录<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mkdir</span> learngit</span><br><span class="line"><span class="keyword">cd</span> learngit</span><br><span class="line"><span class="keyword">pwd</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure></p>
<p>然后，通过<code>git init</code>命令进行初始化<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">git</span> init</span><br></pre></td></tr></table></figure></p>
<p>这样会在当前目录下创建一个.git的目录，这是git用来管理仓库用的，千万别乱改。其他的版本控制工具，有的也会创建类似的目录，例如svn</p>
<p>创建文件后，运行命令<code>git add</code>来将文件纳入git管理<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">add</span> &lt;filename&gt; <span class="comment">	//添加一个具体的文件</span></span><br><span class="line">git <span class="built_in">add</span> <span class="comment">--all		//添加所有文件</span></span><br><span class="line">git <span class="built_in">add</span> .</span><br></pre></td></tr></table></figure></p>
<p>提交，使用命令<code>git commit</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="operator"><span class="keyword">commit</span> -<span class="keyword">m</span> <span class="string">"a comment to commit"</span></span></span><br></pre></td></tr></table></figure></p>
<p><strong>注意</strong>，-m参数提交了一些注释。</p>
<h2 id="2-版本管理"><strong>2.版本管理</strong></h2><h3 id="2-1查看仓库状态"><strong>2.1查看仓库状态</strong></h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status		<span class="comment">//查看当前仓库有什么变化之类的</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2查看文件变化"><strong>2.2查看文件变化</strong></h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;filename&gt;		<span class="comment">//查看指定的文件有何变化</span></span><br></pre></td></tr></table></figure>
<h3 id="2-3查看版本记录"><strong>2.3查看版本记录</strong></h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span>			<span class="comment">	//查看版本日志</span></span><br><span class="line">git <span class="built_in">log</span> <span class="comment">--pretty=oneline		//以单行的方式查看提交的版本日志</span></span><br></pre></td></tr></table></figure>
<h3 id="2-4版本回退"><strong>2.4版本回退</strong></h3><p>Git中，<strong>HEAD</strong>表示<strong>当前版本</strong>，<strong>HEAD^</strong>版本表示<strong>上一个版本</strong>，<strong>HEAD^^</strong>表示<strong>上上个版本</strong>，依此类推。<br>太多了可以用数字，例如<strong>HEAD~5</strong></p>
<p>回退到某个版本可以用以下方式：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="operator"><span class="keyword">reset</span> <span class="comment">--hard HEAD^		//回退到上一个版本	</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard &lt;commit id&gt;	//回退到某个具体的版本，版本号没有必要写全，写前几个能唯一区分的就可以了</span></span></span><br></pre></td></tr></table></figure></p>
<p>查询每一次提交的commit id<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">git</span> reflog</span><br></pre></td></tr></table></figure></p>
<h3 id="2-5撤销修改"><strong>2.5撤销修改</strong></h3><p>已经修改，但是未执行<code>git add</code>：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;filename&gt;			<span class="comment">//撤销当前修改，到上次提交到版本库的状态或者恢复到暂存区状态</span></span><br></pre></td></tr></table></figure></p>
<p>已经修改，也已经执行了<code>git add</code>，但是尚未commit到本地版本库</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="operator"><span class="keyword">reset</span> <span class="keyword">HEAD</span> &lt;filename&gt;		//这个命令会清空暂存区		</span><br><span class="line">git checkout <span class="comment">-- &lt;filename&gt;		//这个命令撤销当前的修改</span></span></span><br></pre></td></tr></table></figure>
<p>如果提交了修改，那么直接<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="operator"><span class="keyword">reset</span> <span class="keyword">HEAD</span>^ &lt;filename&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="2-6删除文件"><strong>2.6删除文件</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm <span class="tag">&lt;<span class="title">filename</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p><strong>Git</strong></p>
<p><strong>参考资料</strong>: </p>
<ol>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰的官方网站</a></li>
<li><a href="http://gitbook.liuhui998.com/index.html" target="_blank" rel="external">Git Community Book中文版</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/07/git.html" target="_blank" rel="external">Git分支管理策略</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/08/git-use-process.html" target="_blank" rel="external">Git 使用规范流程</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h2 id="1-创建版本库"><strong>1.创建版本库</strong></h2><p>首先创建一个空的目录<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span]]>
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="版本控制" scheme="http://yoursite.com/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从github上找到一个超级喜欢的主题]]></title>
    <link href="http://yoursite.com/2015/09/11/theme/"/>
    <id>http://yoursite.com/2015/09/11/theme/</id>
    <published>2015-09-11T08:54:24.842Z</published>
    <updated>2015-09-11T08:54:24.842Z</updated>
    <content type="html"><![CDATA[<p>从github上找到一个超级喜欢的主题，赶紧clone到本地试试效果，感觉真的很清爽，不错，就用这个了。</p>
<p>感谢作者<strong>litten</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>从github上找到一个超级喜欢的主题，赶紧clone到本地试试效果，感觉真的很清爽，不错，就用这个了。</p>
<p>感谢作者<strong>litten</strong></p>
]]>
    </summary>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="theme" scheme="http://yoursite.com/tags/theme/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello, Hexo world]]></title>
    <link href="http://yoursite.com/2015/09/11/Hello-Hexo-world/"/>
    <id>http://yoursite.com/2015/09/11/Hello-Hexo-world/</id>
    <published>2015-09-11T06:01:28.000Z</published>
    <updated>2015-09-11T06:01:28.921Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
</feed>
